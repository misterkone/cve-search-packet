#!/usr/bin/env python
import socket
import dpkt
import pymongo
import sys
import os

#Pcap reading and http variable user-agent extraction

fichier=sys.argv[1]
def parse_entete_http_resquest(fichier):
  global requete
  global src_ip
  f=open(fichier)
  pcap = dpkt.pcap.Reader(f)
  for ts, buf in pcap:
       eth = dpkt.ethernet.Ethernet(buf)
       ip = eth.data
       tcp = ip.data
       src_ip=socket.inet_ntoa(ip.src)

# Http header test
       if tcp.dport == 80 and len(tcp.data) > 0:
                   http = dpkt.http.Request(tcp.data)
                   requete = http.headers['user-agent']
                  # print src_ip,"User-agent:", requete
                   return requete

# Firefox user-agent extraction and research in mongodb data for vulnerabilies discover

def recherche_firefox(requete): 
# mongodb connexion and search
  connect = pymongo.Connection()
  db = connect.cvedb
  collection = db.cves
  e = {}
  e = db.cpe.find()
  for key  in e:
    result= requete[62:69].lower() + ":" + requete[70:] # firefox user-agent extraction based on #pcap file collected
    result1= requete[69:75].lower() + ":" + requete[76:88] # chrome user-agent extraction based on #pcap file collected
    result2= requete[89:96].lower() + ":" + requete[98:] # safari user-agent extraction based on #pcap file collected

# Firefox user-agent test for vulnerabilities
    print src_ip,"User-agent of browser:", requete
    print ("check this user-agent for vulnerabilities in mongodb and exist, print them")
    if result[0:] in key['id']:
      print (src_ip, (key['id']))
      return (key['id']) 


# Google chrome  user-agent test for vulnerabilities
    elif result1[0:] in key['id']:  
      print src_ip, (key['id'])
      return (key['id'])  
 
# Safari  user-agent test for vulnerabilities
    elif result2[0:] in key['id']:  
      print src_ip, (key['id'])
      return (key['id'])    
     
if __name__ == "__main__":
   parse_entete_http_resquest(fichier=sys.argv[1])
if __name__ == "__main__":
   recherche_firefox(requete) 

#Pcap reading and http variable server extraction

def parse_entete_http_response(fichier):
  global reponse
  f=open(fichier)
  pcap = dpkt.pcap.Reader(f)
  for ts, buf in pcap:
       eth = dpkt.ethernet.Ethernet(buf)
       ip = eth.data
       tcp = ip.data
       src_ip=socket.inet_ntoa(ip.src)
       if tcp.sport == 80 and len(tcp.data) > 0:
                   http = dpkt.http.Response(tcp.data)
                   reponse = http.headers['server']
                   return reponse

#http variable server search in mogodb for vulnerabilities

def recherche(reponse): 
# mongodb connexion and search 
 connect = pymongo.Connection()
 db = connect.cvedb
 collection = db.cves
 e = {}
 e = db.cpe.find()
 result= reponse[0:6].lower() + ":" + reponse[7:13] # http server variable extraction based on
 #pcap file collected

 print ("Actual version of Apache server:" +result)
 print ("Check this version for vulnerabilities in mongodb")
 for key  in e:
       result2= reponse[0:5].lower()
       if result2 in key['id']:
        print (key['id'])
        return (key['id']) 

if __name__ == "__main__":
  parse_entete_http_response(fichier=sys.argv[1]) 
if __name__ == "__main__":
   recherche(reponse) 





